// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "objects.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eveobjects {

namespace {

const ::google::protobuf::Descriptor* infoObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  infoObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* stringgroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stringgroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* BooleanObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BooleanObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* functionCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  functionCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* systemObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  systemObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* stringResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stringResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* overview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  overview_reflection_ = NULL;
const ::google::protobuf::Descriptor* itemgroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  itemgroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* targetentry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  targetentry_reflection_ = NULL;
const ::google::protobuf::Descriptor* jammers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  jammers_reflection_ = NULL;
const ::google::protobuf::Descriptor* Interface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Interface_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_objects_2eproto() {
  protobuf_AddDesc_objects_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "objects.proto");
  GOOGLE_CHECK(file != NULL);
  infoObject_descriptor_ = file->message_type(0);
  static const int infoObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infoObject, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infoObject, value_),
  };
  infoObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      infoObject_descriptor_,
      infoObject::default_instance_,
      infoObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infoObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infoObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(infoObject));
  stringgroup_descriptor_ = file->message_type(1);
  static const int stringgroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringgroup, data_),
  };
  stringgroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stringgroup_descriptor_,
      stringgroup::default_instance_,
      stringgroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringgroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringgroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stringgroup));
  BooleanObject_descriptor_ = file->message_type(2);
  static const int BooleanObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanObject, istrue_),
  };
  BooleanObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BooleanObject_descriptor_,
      BooleanObject::default_instance_,
      BooleanObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BooleanObject));
  functionCall_descriptor_ = file->message_type(3);
  static const int functionCall_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionCall, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionCall, strparameter_),
  };
  functionCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      functionCall_descriptor_,
      functionCall::default_instance_,
      functionCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(functionCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(functionCall));
  systemObject_descriptor_ = file->message_type(4);
  static const int systemObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(systemObject, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(systemObject, info_),
  };
  systemObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      systemObject_descriptor_,
      systemObject::default_instance_,
      systemObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(systemObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(systemObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(systemObject));
  stringResponse_descriptor_ = file->message_type(5);
  static const int stringResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringResponse, data_),
  };
  stringResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stringResponse_descriptor_,
      stringResponse::default_instance_,
      stringResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stringResponse));
  overview_descriptor_ = file->message_type(6);
  static const int overview_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(overview, overviewentry_),
  };
  overview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      overview_descriptor_,
      overview::default_instance_,
      overview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(overview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(overview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(overview));
  itemgroup_descriptor_ = file->message_type(7);
  static const int itemgroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemgroup, items_),
  };
  itemgroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      itemgroup_descriptor_,
      itemgroup::default_instance_,
      itemgroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemgroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(itemgroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(itemgroup));
  item_descriptor_ = file->message_type(8);
  static const int item_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, data_),
  };
  item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_descriptor_,
      item::default_instance_,
      item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item));
  label_descriptor_ = file->message_type(9);
  static const int label_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, topleftx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, toplefty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, color_),
  };
  label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_descriptor_,
      label::default_instance_,
      label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label));
  TargetList_descriptor_ = file->message_type(10);
  static const int TargetList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetList, thistarget_),
  };
  TargetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetList_descriptor_,
      TargetList::default_instance_,
      TargetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetList));
  targetentry_descriptor_ = file->message_type(11);
  static const int targetentry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(targetentry, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(targetentry, jams_),
  };
  targetentry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      targetentry_descriptor_,
      targetentry::default_instance_,
      targetentry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(targetentry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(targetentry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(targetentry));
  jammers_descriptor_ = file->message_type(12);
  static const int jammers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jammers, jammer_),
  };
  jammers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      jammers_descriptor_,
      jammers::default_instance_,
      jammers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jammers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jammers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(jammers));
  Interface_descriptor_ = file->message_type(13);
  static const int Interface_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, topleftx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, toplefty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, hasclosebutton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, closetopleftx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, closetoplefty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, hascontinuebutton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, continuetopleftx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, continuetoplefty_),
  };
  Interface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Interface_descriptor_,
      Interface::default_instance_,
      Interface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Interface));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_objects_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    infoObject_descriptor_, &infoObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stringgroup_descriptor_, &stringgroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BooleanObject_descriptor_, &BooleanObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    functionCall_descriptor_, &functionCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    systemObject_descriptor_, &systemObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stringResponse_descriptor_, &stringResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    overview_descriptor_, &overview::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    itemgroup_descriptor_, &itemgroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_descriptor_, &item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_descriptor_, &label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetList_descriptor_, &TargetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    targetentry_descriptor_, &targetentry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    jammers_descriptor_, &jammers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Interface_descriptor_, &Interface::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_objects_2eproto() {
  delete infoObject::default_instance_;
  delete infoObject_reflection_;
  delete stringgroup::default_instance_;
  delete stringgroup_reflection_;
  delete BooleanObject::default_instance_;
  delete BooleanObject_reflection_;
  delete functionCall::default_instance_;
  delete functionCall_reflection_;
  delete systemObject::default_instance_;
  delete systemObject_reflection_;
  delete stringResponse::default_instance_;
  delete stringResponse_reflection_;
  delete overview::default_instance_;
  delete overview_reflection_;
  delete itemgroup::default_instance_;
  delete itemgroup_reflection_;
  delete item::default_instance_;
  delete item_reflection_;
  delete label::default_instance_;
  delete label_reflection_;
  delete TargetList::default_instance_;
  delete TargetList_reflection_;
  delete targetentry::default_instance_;
  delete targetentry_reflection_;
  delete jammers::default_instance_;
  delete jammers_reflection_;
  delete Interface::default_instance_;
  delete Interface_reflection_;
}

void protobuf_AddDesc_objects_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\robjects.proto\022\neveobjects\")\n\ninfoObjec"
    "t\022\014\n\004text\030\001 \001(\t\022\r\n\005value\030\002 \001(\005\"7\n\013string"
    "group\022(\n\004data\030\001 \003(\0132\032.eveobjects.stringR"
    "esponse\"\037\n\rBooleanObject\022\016\n\006istrue\030\001 \002(\010"
    "\"2\n\014functionCall\022\014\n\004name\030\001 \002(\t\022\024\n\014strpar"
    "ameter\030\002 \001(\t\"*\n\014systemObject\022\014\n\004name\030\001 \002"
    "(\t\022\014\n\004info\030\002 \002(\t\"\036\n\016stringResponse\022\014\n\004da"
    "ta\030\001 \002(\t\"4\n\010overview\022(\n\roverviewEntry\030\001 "
    "\003(\0132\021.eveobjects.label\",\n\titemgroup\022\037\n\005i"
    "tems\030\001 \003(\0132\020.eveobjects.item\"e\n\004item\022\014\n\004"
    "name\030\001 \002(\t\022\020\n\010quantity\030\002 \002(\005\022\014\n\004meta\030\003 \002"
    "(\t\022\016\n\006volume\030\004 \002(\t\022\037\n\004data\030\005 \002(\0132\021.eveob"
    "jects.label\"g\n\005label\022\014\n\004text\030\001 \002(\t\022\020\n\010to"
    "pLeftX\030\002 \002(\005\022\020\n\010topLeftY\030\003 \002(\005\022\r\n\005width\030"
    "\004 \002(\005\022\016\n\006height\030\005 \002(\005\022\r\n\005color\030\006 \001(\001\"9\n\n"
    "TargetList\022+\n\nthistarget\030\001 \003(\0132\027.eveobje"
    "cts.targetentry\"Q\n\013targetentry\022\037\n\004text\030\001"
    " \001(\0132\021.eveobjects.label\022!\n\004jams\030\002 \001(\0132\023."
    "eveobjects.jammers\"\031\n\007jammers\022\016\n\006jammer\030"
    "\001 \003(\t\"\361\001\n\tInterface\022\014\n\004name\030\001 \002(\t\022\020\n\010top"
    "leftX\030\002 \002(\005\022\020\n\010topleftY\030\003 \002(\005\022\r\n\005width\030\004"
    " \002(\005\022\016\n\006height\030\005 \002(\005\022\026\n\016hasCloseButton\030\006"
    " \001(\010\022\025\n\rcloseTopLeftX\030\007 \001(\005\022\025\n\rcloseTopL"
    "eftY\030\010 \001(\005\022\031\n\021hasContinueButton\030\t \001(\010\022\030\n"
    "\020continueTopLeftX\030\n \001(\005\022\030\n\020continueTopLe"
    "ftY\030\013 \001(\005", 1009);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "objects.proto", &protobuf_RegisterTypes);
  infoObject::default_instance_ = new infoObject();
  stringgroup::default_instance_ = new stringgroup();
  BooleanObject::default_instance_ = new BooleanObject();
  functionCall::default_instance_ = new functionCall();
  systemObject::default_instance_ = new systemObject();
  stringResponse::default_instance_ = new stringResponse();
  overview::default_instance_ = new overview();
  itemgroup::default_instance_ = new itemgroup();
  item::default_instance_ = new item();
  label::default_instance_ = new label();
  TargetList::default_instance_ = new TargetList();
  targetentry::default_instance_ = new targetentry();
  jammers::default_instance_ = new jammers();
  Interface::default_instance_ = new Interface();
  infoObject::default_instance_->InitAsDefaultInstance();
  stringgroup::default_instance_->InitAsDefaultInstance();
  BooleanObject::default_instance_->InitAsDefaultInstance();
  functionCall::default_instance_->InitAsDefaultInstance();
  systemObject::default_instance_->InitAsDefaultInstance();
  stringResponse::default_instance_->InitAsDefaultInstance();
  overview::default_instance_->InitAsDefaultInstance();
  itemgroup::default_instance_->InitAsDefaultInstance();
  item::default_instance_->InitAsDefaultInstance();
  label::default_instance_->InitAsDefaultInstance();
  TargetList::default_instance_->InitAsDefaultInstance();
  targetentry::default_instance_->InitAsDefaultInstance();
  jammers::default_instance_->InitAsDefaultInstance();
  Interface::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_objects_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_objects_2eproto {
  StaticDescriptorInitializer_objects_2eproto() {
    protobuf_AddDesc_objects_2eproto();
  }
} static_descriptor_initializer_objects_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int infoObject::kTextFieldNumber;
const int infoObject::kValueFieldNumber;
#endif  // !_MSC_VER

infoObject::infoObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void infoObject::InitAsDefaultInstance() {
}

infoObject::infoObject(const infoObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void infoObject::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

infoObject::~infoObject() {
  SharedDtor();
}

void infoObject::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void infoObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* infoObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return infoObject_descriptor_;
}

const infoObject& infoObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

infoObject* infoObject::default_instance_ = NULL;

infoObject* infoObject::New() const {
  return new infoObject;
}

void infoObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool infoObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void infoObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* infoObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int infoObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void infoObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const infoObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const infoObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void infoObject::MergeFrom(const infoObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void infoObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void infoObject::CopyFrom(const infoObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool infoObject::IsInitialized() const {
  
  return true;
}

void infoObject::Swap(infoObject* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata infoObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = infoObject_descriptor_;
  metadata.reflection = infoObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stringgroup::kDataFieldNumber;
#endif  // !_MSC_VER

stringgroup::stringgroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stringgroup::InitAsDefaultInstance() {
}

stringgroup::stringgroup(const stringgroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stringgroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stringgroup::~stringgroup() {
  SharedDtor();
}

void stringgroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stringgroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stringgroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stringgroup_descriptor_;
}

const stringgroup& stringgroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

stringgroup* stringgroup::default_instance_ = NULL;

stringgroup* stringgroup::New() const {
  return new stringgroup;
}

void stringgroup::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stringgroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eveobjects.stringResponse data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stringgroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .eveobjects.stringResponse data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stringgroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .eveobjects.stringResponse data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stringgroup::ByteSize() const {
  int total_size = 0;
  
  // repeated .eveobjects.stringResponse data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stringgroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stringgroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stringgroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stringgroup::MergeFrom(const stringgroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stringgroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stringgroup::CopyFrom(const stringgroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stringgroup::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void stringgroup::Swap(stringgroup* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stringgroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stringgroup_descriptor_;
  metadata.reflection = stringgroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BooleanObject::kIstrueFieldNumber;
#endif  // !_MSC_VER

BooleanObject::BooleanObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BooleanObject::InitAsDefaultInstance() {
}

BooleanObject::BooleanObject(const BooleanObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BooleanObject::SharedCtor() {
  _cached_size_ = 0;
  istrue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BooleanObject::~BooleanObject() {
  SharedDtor();
}

void BooleanObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BooleanObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BooleanObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BooleanObject_descriptor_;
}

const BooleanObject& BooleanObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

BooleanObject* BooleanObject::default_instance_ = NULL;

BooleanObject* BooleanObject::New() const {
  return new BooleanObject;
}

void BooleanObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    istrue_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BooleanObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool istrue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrue_)));
          set_has_istrue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BooleanObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool istrue = 1;
  if (has_istrue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->istrue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BooleanObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool istrue = 1;
  if (has_istrue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->istrue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BooleanObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool istrue = 1;
    if (has_istrue()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BooleanObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BooleanObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BooleanObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BooleanObject::MergeFrom(const BooleanObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_istrue()) {
      set_istrue(from.istrue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BooleanObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanObject::CopyFrom(const BooleanObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BooleanObject::Swap(BooleanObject* other) {
  if (other != this) {
    std::swap(istrue_, other->istrue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BooleanObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BooleanObject_descriptor_;
  metadata.reflection = BooleanObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int functionCall::kNameFieldNumber;
const int functionCall::kStrparameterFieldNumber;
#endif  // !_MSC_VER

functionCall::functionCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void functionCall::InitAsDefaultInstance() {
}

functionCall::functionCall(const functionCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void functionCall::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strparameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

functionCall::~functionCall() {
  SharedDtor();
}

void functionCall::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (strparameter_ != &::google::protobuf::internal::kEmptyString) {
    delete strparameter_;
  }
  if (this != default_instance_) {
  }
}

void functionCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* functionCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return functionCall_descriptor_;
}

const functionCall& functionCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

functionCall* functionCall::default_instance_ = NULL;

functionCall* functionCall::New() const {
  return new functionCall;
}

void functionCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_strparameter()) {
      if (strparameter_ != &::google::protobuf::internal::kEmptyString) {
        strparameter_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool functionCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strparameter;
        break;
      }
      
      // optional string strparameter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strparameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strparameter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strparameter().data(), this->strparameter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void functionCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string strparameter = 2;
  if (has_strparameter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparameter().data(), this->strparameter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strparameter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* functionCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string strparameter = 2;
  if (has_strparameter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparameter().data(), this->strparameter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strparameter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int functionCall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string strparameter = 2;
    if (has_strparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strparameter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void functionCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const functionCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const functionCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void functionCall::MergeFrom(const functionCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_strparameter()) {
      set_strparameter(from.strparameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void functionCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void functionCall::CopyFrom(const functionCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool functionCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void functionCall::Swap(functionCall* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(strparameter_, other->strparameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata functionCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = functionCall_descriptor_;
  metadata.reflection = functionCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int systemObject::kNameFieldNumber;
const int systemObject::kInfoFieldNumber;
#endif  // !_MSC_VER

systemObject::systemObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void systemObject::InitAsDefaultInstance() {
}

systemObject::systemObject(const systemObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void systemObject::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

systemObject::~systemObject() {
  SharedDtor();
}

void systemObject::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void systemObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* systemObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return systemObject_descriptor_;
}

const systemObject& systemObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

systemObject* systemObject::default_instance_ = NULL;

systemObject* systemObject::New() const {
  return new systemObject;
}

void systemObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool systemObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // required string info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void systemObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* systemObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int systemObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void systemObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const systemObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const systemObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void systemObject::MergeFrom(const systemObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void systemObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void systemObject::CopyFrom(const systemObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool systemObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void systemObject::Swap(systemObject* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata systemObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = systemObject_descriptor_;
  metadata.reflection = systemObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stringResponse::kDataFieldNumber;
#endif  // !_MSC_VER

stringResponse::stringResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stringResponse::InitAsDefaultInstance() {
}

stringResponse::stringResponse(const stringResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stringResponse::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stringResponse::~stringResponse() {
  SharedDtor();
}

void stringResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stringResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stringResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stringResponse_descriptor_;
}

const stringResponse& stringResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

stringResponse* stringResponse::default_instance_ = NULL;

stringResponse* stringResponse::New() const {
  return new stringResponse;
}

void stringResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stringResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stringResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stringResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stringResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stringResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stringResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stringResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stringResponse::MergeFrom(const stringResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stringResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stringResponse::CopyFrom(const stringResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stringResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void stringResponse::Swap(stringResponse* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stringResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stringResponse_descriptor_;
  metadata.reflection = stringResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int overview::kOverviewEntryFieldNumber;
#endif  // !_MSC_VER

overview::overview()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void overview::InitAsDefaultInstance() {
}

overview::overview(const overview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void overview::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

overview::~overview() {
  SharedDtor();
}

void overview::SharedDtor() {
  if (this != default_instance_) {
  }
}

void overview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* overview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return overview_descriptor_;
}

const overview& overview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

overview* overview::default_instance_ = NULL;

overview* overview::New() const {
  return new overview;
}

void overview::Clear() {
  overviewentry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool overview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eveobjects.label overviewEntry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_overviewEntry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overviewentry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_overviewEntry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void overview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .eveobjects.label overviewEntry = 1;
  for (int i = 0; i < this->overviewentry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->overviewentry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* overview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .eveobjects.label overviewEntry = 1;
  for (int i = 0; i < this->overviewentry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->overviewentry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int overview::ByteSize() const {
  int total_size = 0;
  
  // repeated .eveobjects.label overviewEntry = 1;
  total_size += 1 * this->overviewentry_size();
  for (int i = 0; i < this->overviewentry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->overviewentry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void overview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const overview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const overview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void overview::MergeFrom(const overview& from) {
  GOOGLE_CHECK_NE(&from, this);
  overviewentry_.MergeFrom(from.overviewentry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void overview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void overview::CopyFrom(const overview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool overview::IsInitialized() const {
  
  for (int i = 0; i < overviewentry_size(); i++) {
    if (!this->overviewentry(i).IsInitialized()) return false;
  }
  return true;
}

void overview::Swap(overview* other) {
  if (other != this) {
    overviewentry_.Swap(&other->overviewentry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata overview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = overview_descriptor_;
  metadata.reflection = overview_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int itemgroup::kItemsFieldNumber;
#endif  // !_MSC_VER

itemgroup::itemgroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void itemgroup::InitAsDefaultInstance() {
}

itemgroup::itemgroup(const itemgroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void itemgroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

itemgroup::~itemgroup() {
  SharedDtor();
}

void itemgroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void itemgroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* itemgroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return itemgroup_descriptor_;
}

const itemgroup& itemgroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

itemgroup* itemgroup::default_instance_ = NULL;

itemgroup* itemgroup::New() const {
  return new itemgroup;
}

void itemgroup::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool itemgroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eveobjects.item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void itemgroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .eveobjects.item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* itemgroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .eveobjects.item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int itemgroup::ByteSize() const {
  int total_size = 0;
  
  // repeated .eveobjects.item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void itemgroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const itemgroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const itemgroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void itemgroup::MergeFrom(const itemgroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void itemgroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void itemgroup::CopyFrom(const itemgroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool itemgroup::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void itemgroup::Swap(itemgroup* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata itemgroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = itemgroup_descriptor_;
  metadata.reflection = itemgroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item::kNameFieldNumber;
const int item::kQuantityFieldNumber;
const int item::kMetaFieldNumber;
const int item::kVolumeFieldNumber;
const int item::kDataFieldNumber;
#endif  // !_MSC_VER

item::item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item::InitAsDefaultInstance() {
  data_ = const_cast< ::eveobjects::label*>(&::eveobjects::label::default_instance());
}

item::item(const item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  meta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item::~item() {
  SharedDtor();
}

void item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (meta_ != &::google::protobuf::internal::kEmptyString) {
    delete meta_;
  }
  if (volume_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_descriptor_;
}

const item& item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

item* item::default_instance_ = NULL;

item* item::New() const {
  return new item;
}

void item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quantity_ = 0;
    if (has_meta()) {
      if (meta_ != &::google::protobuf::internal::kEmptyString) {
        meta_->clear();
      }
    }
    if (has_volume()) {
      if (volume_ != &::google::protobuf::internal::kEmptyString) {
        volume_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::eveobjects::label::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }
      
      // required int32 quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_meta;
        break;
      }
      
      // required string meta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meta().data(), this->meta().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_volume;
        break;
      }
      
      // required string volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume().data(), this->volume().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // required .eveobjects.label data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }
  
  // required string meta = 3;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta().data(), this->meta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->meta(), output);
  }
  
  // required string volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume().data(), this->volume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->volume(), output);
  }
  
  // required .eveobjects.label data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }
  
  // required string meta = 3;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta().data(), this->meta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->meta(), target);
  }
  
  // required string volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume().data(), this->volume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->volume(), target);
  }
  
  // required .eveobjects.label data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // required string meta = 3;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta());
    }
    
    // required string volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume());
    }
    
    // required .eveobjects.label data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item::MergeFrom(const item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_meta()) {
      set_meta(from.meta());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_data()) {
      mutable_data()->::eveobjects::label::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item::CopyFrom(const item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void item::Swap(item* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(quantity_, other->quantity_);
    std::swap(meta_, other->meta_);
    std::swap(volume_, other->volume_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_descriptor_;
  metadata.reflection = item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label::kTextFieldNumber;
const int label::kTopLeftXFieldNumber;
const int label::kTopLeftYFieldNumber;
const int label::kWidthFieldNumber;
const int label::kHeightFieldNumber;
const int label::kColorFieldNumber;
#endif  // !_MSC_VER

label::label()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void label::InitAsDefaultInstance() {
}

label::label(const label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void label::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  topleftx_ = 0;
  toplefty_ = 0;
  width_ = 0;
  height_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label::~label() {
  SharedDtor();
}

void label::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_descriptor_;
}

const label& label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

label* label::default_instance_ = NULL;

label* label::New() const {
  return new label;
}

void label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    topleftx_ = 0;
    toplefty_ = 0;
    width_ = 0;
    height_ = 0;
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topLeftX;
        break;
      }
      
      // required int32 topLeftX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topLeftX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topleftx_)));
          set_has_topleftx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_topLeftY;
        break;
      }
      
      // required int32 topLeftY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topLeftY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toplefty_)));
          set_has_toplefty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }
      
      // required int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }
      
      // required int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_color;
        break;
      }
      
      // optional double color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  // required int32 topLeftX = 2;
  if (has_topleftx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topleftx(), output);
  }
  
  // required int32 topLeftY = 3;
  if (has_toplefty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toplefty(), output);
  }
  
  // required int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }
  
  // required int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }
  
  // optional double color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  // required int32 topLeftX = 2;
  if (has_topleftx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topleftx(), target);
  }
  
  // required int32 topLeftY = 3;
  if (has_toplefty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toplefty(), target);
  }
  
  // required int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }
  
  // required int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }
  
  // optional double color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int label::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // required int32 topLeftX = 2;
    if (has_topleftx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topleftx());
    }
    
    // required int32 topLeftY = 3;
    if (has_toplefty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toplefty());
    }
    
    // required int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional double color = 6;
    if (has_color()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label::MergeFrom(const label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_topleftx()) {
      set_topleftx(from.topleftx());
    }
    if (from.has_toplefty()) {
      set_toplefty(from.toplefty());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label::CopyFrom(const label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void label::Swap(label* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(topleftx_, other->topleftx_);
    std::swap(toplefty_, other->toplefty_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_descriptor_;
  metadata.reflection = label_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetList::kThistargetFieldNumber;
#endif  // !_MSC_VER

TargetList::TargetList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetList::InitAsDefaultInstance() {
}

TargetList::TargetList(const TargetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetList::~TargetList() {
  SharedDtor();
}

void TargetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetList_descriptor_;
}

const TargetList& TargetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

TargetList* TargetList::default_instance_ = NULL;

TargetList* TargetList::New() const {
  return new TargetList;
}

void TargetList::Clear() {
  thistarget_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eveobjects.targetentry thistarget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thistarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thistarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_thistarget;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .eveobjects.targetentry thistarget = 1;
  for (int i = 0; i < this->thistarget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->thistarget(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .eveobjects.targetentry thistarget = 1;
  for (int i = 0; i < this->thistarget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->thistarget(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetList::ByteSize() const {
  int total_size = 0;
  
  // repeated .eveobjects.targetentry thistarget = 1;
  total_size += 1 * this->thistarget_size();
  for (int i = 0; i < this->thistarget_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thistarget(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetList::MergeFrom(const TargetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  thistarget_.MergeFrom(from.thistarget_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetList::CopyFrom(const TargetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetList::IsInitialized() const {
  
  for (int i = 0; i < thistarget_size(); i++) {
    if (!this->thistarget(i).IsInitialized()) return false;
  }
  return true;
}

void TargetList::Swap(TargetList* other) {
  if (other != this) {
    thistarget_.Swap(&other->thistarget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetList_descriptor_;
  metadata.reflection = TargetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int targetentry::kTextFieldNumber;
const int targetentry::kJamsFieldNumber;
#endif  // !_MSC_VER

targetentry::targetentry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void targetentry::InitAsDefaultInstance() {
  text_ = const_cast< ::eveobjects::label*>(&::eveobjects::label::default_instance());
  jams_ = const_cast< ::eveobjects::jammers*>(&::eveobjects::jammers::default_instance());
}

targetentry::targetentry(const targetentry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void targetentry::SharedCtor() {
  _cached_size_ = 0;
  text_ = NULL;
  jams_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

targetentry::~targetentry() {
  SharedDtor();
}

void targetentry::SharedDtor() {
  if (this != default_instance_) {
    delete text_;
    delete jams_;
  }
}

void targetentry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* targetentry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return targetentry_descriptor_;
}

const targetentry& targetentry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

targetentry* targetentry::default_instance_ = NULL;

targetentry* targetentry::New() const {
  return new targetentry;
}

void targetentry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != NULL) text_->::eveobjects::label::Clear();
    }
    if (has_jams()) {
      if (jams_ != NULL) jams_->::eveobjects::jammers::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool targetentry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eveobjects.label text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_jams;
        break;
      }
      
      // optional .eveobjects.jammers jams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void targetentry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .eveobjects.label text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->text(), output);
  }
  
  // optional .eveobjects.jammers jams = 2;
  if (has_jams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jams(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* targetentry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .eveobjects.label text = 1;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->text(), target);
  }
  
  // optional .eveobjects.jammers jams = 2;
  if (has_jams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jams(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int targetentry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eveobjects.label text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }
    
    // optional .eveobjects.jammers jams = 2;
    if (has_jams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jams());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void targetentry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const targetentry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const targetentry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void targetentry::MergeFrom(const targetentry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      mutable_text()->::eveobjects::label::MergeFrom(from.text());
    }
    if (from.has_jams()) {
      mutable_jams()->::eveobjects::jammers::MergeFrom(from.jams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void targetentry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void targetentry::CopyFrom(const targetentry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool targetentry::IsInitialized() const {
  
  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  return true;
}

void targetentry::Swap(targetentry* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(jams_, other->jams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata targetentry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = targetentry_descriptor_;
  metadata.reflection = targetentry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int jammers::kJammerFieldNumber;
#endif  // !_MSC_VER

jammers::jammers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void jammers::InitAsDefaultInstance() {
}

jammers::jammers(const jammers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void jammers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

jammers::~jammers() {
  SharedDtor();
}

void jammers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void jammers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* jammers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jammers_descriptor_;
}

const jammers& jammers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

jammers* jammers::default_instance_ = NULL;

jammers* jammers::New() const {
  return new jammers;
}

void jammers::Clear() {
  jammer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool jammers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string jammer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jammer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jammer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jammer(0).data(), this->jammer(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_jammer;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void jammers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string jammer = 1;
  for (int i = 0; i < this->jammer_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->jammer(i).data(), this->jammer(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->jammer(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* jammers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string jammer = 1;
  for (int i = 0; i < this->jammer_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jammer(i).data(), this->jammer(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->jammer(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int jammers::ByteSize() const {
  int total_size = 0;
  
  // repeated string jammer = 1;
  total_size += 1 * this->jammer_size();
  for (int i = 0; i < this->jammer_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jammer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jammers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const jammers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const jammers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void jammers::MergeFrom(const jammers& from) {
  GOOGLE_CHECK_NE(&from, this);
  jammer_.MergeFrom(from.jammer_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void jammers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jammers::CopyFrom(const jammers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jammers::IsInitialized() const {
  
  return true;
}

void jammers::Swap(jammers* other) {
  if (other != this) {
    jammer_.Swap(&other->jammer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata jammers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = jammers_descriptor_;
  metadata.reflection = jammers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Interface::kNameFieldNumber;
const int Interface::kTopleftXFieldNumber;
const int Interface::kTopleftYFieldNumber;
const int Interface::kWidthFieldNumber;
const int Interface::kHeightFieldNumber;
const int Interface::kHasCloseButtonFieldNumber;
const int Interface::kCloseTopLeftXFieldNumber;
const int Interface::kCloseTopLeftYFieldNumber;
const int Interface::kHasContinueButtonFieldNumber;
const int Interface::kContinueTopLeftXFieldNumber;
const int Interface::kContinueTopLeftYFieldNumber;
#endif  // !_MSC_VER

Interface::Interface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Interface::InitAsDefaultInstance() {
}

Interface::Interface(const Interface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Interface::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  topleftx_ = 0;
  toplefty_ = 0;
  width_ = 0;
  height_ = 0;
  hasclosebutton_ = false;
  closetopleftx_ = 0;
  closetoplefty_ = 0;
  hascontinuebutton_ = false;
  continuetopleftx_ = 0;
  continuetoplefty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Interface::~Interface() {
  SharedDtor();
}

void Interface::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Interface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Interface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Interface_descriptor_;
}

const Interface& Interface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_objects_2eproto();  return *default_instance_;
}

Interface* Interface::default_instance_ = NULL;

Interface* Interface::New() const {
  return new Interface;
}

void Interface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    topleftx_ = 0;
    toplefty_ = 0;
    width_ = 0;
    height_ = 0;
    hasclosebutton_ = false;
    closetopleftx_ = 0;
    closetoplefty_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hascontinuebutton_ = false;
    continuetopleftx_ = 0;
    continuetoplefty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Interface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topleftX;
        break;
      }
      
      // required int32 topleftX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topleftX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topleftx_)));
          set_has_topleftx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_topleftY;
        break;
      }
      
      // required int32 topleftY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topleftY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toplefty_)));
          set_has_toplefty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }
      
      // required int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }
      
      // required int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hasCloseButton;
        break;
      }
      
      // optional bool hasCloseButton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasCloseButton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasclosebutton_)));
          set_has_hasclosebutton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_closeTopLeftX;
        break;
      }
      
      // optional int32 closeTopLeftX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeTopLeftX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closetopleftx_)));
          set_has_closetopleftx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_closeTopLeftY;
        break;
      }
      
      // optional int32 closeTopLeftY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeTopLeftY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closetoplefty_)));
          set_has_closetoplefty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hasContinueButton;
        break;
      }
      
      // optional bool hasContinueButton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasContinueButton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascontinuebutton_)));
          set_has_hascontinuebutton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_continueTopLeftX;
        break;
      }
      
      // optional int32 continueTopLeftX = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueTopLeftX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuetopleftx_)));
          set_has_continuetopleftx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_continueTopLeftY;
        break;
      }
      
      // optional int32 continueTopLeftY = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueTopLeftY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuetoplefty_)));
          set_has_continuetoplefty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Interface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 topleftX = 2;
  if (has_topleftx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topleftx(), output);
  }
  
  // required int32 topleftY = 3;
  if (has_toplefty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toplefty(), output);
  }
  
  // required int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }
  
  // required int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }
  
  // optional bool hasCloseButton = 6;
  if (has_hasclosebutton()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasclosebutton(), output);
  }
  
  // optional int32 closeTopLeftX = 7;
  if (has_closetopleftx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->closetopleftx(), output);
  }
  
  // optional int32 closeTopLeftY = 8;
  if (has_closetoplefty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->closetoplefty(), output);
  }
  
  // optional bool hasContinueButton = 9;
  if (has_hascontinuebutton()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hascontinuebutton(), output);
  }
  
  // optional int32 continueTopLeftX = 10;
  if (has_continuetopleftx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->continuetopleftx(), output);
  }
  
  // optional int32 continueTopLeftY = 11;
  if (has_continuetoplefty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->continuetoplefty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Interface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 topleftX = 2;
  if (has_topleftx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topleftx(), target);
  }
  
  // required int32 topleftY = 3;
  if (has_toplefty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toplefty(), target);
  }
  
  // required int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }
  
  // required int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }
  
  // optional bool hasCloseButton = 6;
  if (has_hasclosebutton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasclosebutton(), target);
  }
  
  // optional int32 closeTopLeftX = 7;
  if (has_closetopleftx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->closetopleftx(), target);
  }
  
  // optional int32 closeTopLeftY = 8;
  if (has_closetoplefty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->closetoplefty(), target);
  }
  
  // optional bool hasContinueButton = 9;
  if (has_hascontinuebutton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hascontinuebutton(), target);
  }
  
  // optional int32 continueTopLeftX = 10;
  if (has_continuetopleftx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->continuetopleftx(), target);
  }
  
  // optional int32 continueTopLeftY = 11;
  if (has_continuetoplefty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->continuetoplefty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Interface::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 topleftX = 2;
    if (has_topleftx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topleftx());
    }
    
    // required int32 topleftY = 3;
    if (has_toplefty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toplefty());
    }
    
    // required int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional bool hasCloseButton = 6;
    if (has_hasclosebutton()) {
      total_size += 1 + 1;
    }
    
    // optional int32 closeTopLeftX = 7;
    if (has_closetopleftx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closetopleftx());
    }
    
    // optional int32 closeTopLeftY = 8;
    if (has_closetoplefty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closetoplefty());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool hasContinueButton = 9;
    if (has_hascontinuebutton()) {
      total_size += 1 + 1;
    }
    
    // optional int32 continueTopLeftX = 10;
    if (has_continuetopleftx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuetopleftx());
    }
    
    // optional int32 continueTopLeftY = 11;
    if (has_continuetoplefty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuetoplefty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Interface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Interface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Interface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Interface::MergeFrom(const Interface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_topleftx()) {
      set_topleftx(from.topleftx());
    }
    if (from.has_toplefty()) {
      set_toplefty(from.toplefty());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_hasclosebutton()) {
      set_hasclosebutton(from.hasclosebutton());
    }
    if (from.has_closetopleftx()) {
      set_closetopleftx(from.closetopleftx());
    }
    if (from.has_closetoplefty()) {
      set_closetoplefty(from.closetoplefty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hascontinuebutton()) {
      set_hascontinuebutton(from.hascontinuebutton());
    }
    if (from.has_continuetopleftx()) {
      set_continuetopleftx(from.continuetopleftx());
    }
    if (from.has_continuetoplefty()) {
      set_continuetoplefty(from.continuetoplefty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Interface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interface::CopyFrom(const Interface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Interface::Swap(Interface* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(topleftx_, other->topleftx_);
    std::swap(toplefty_, other->toplefty_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(hasclosebutton_, other->hasclosebutton_);
    std::swap(closetopleftx_, other->closetopleftx_);
    std::swap(closetoplefty_, other->closetoplefty_);
    std::swap(hascontinuebutton_, other->hascontinuebutton_);
    std::swap(continuetopleftx_, other->continuetopleftx_);
    std::swap(continuetoplefty_, other->continuetoplefty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Interface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Interface_descriptor_;
  metadata.reflection = Interface_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eveobjects

// @@protoc_insertion_point(global_scope)
